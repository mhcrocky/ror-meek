import React from 'react';
import forwardRef from 'react-context-toolbox/forwardRef';
import shallowequal from 'shallowequal';
import { EMPTY_ERRORS } from './utils/ErrorUtils';
export var DEFAULT_CHANNEL = '@@parent';

var isEqualOrNullish = function isEqualOrNullish(a, b) {
  return a === b || a == null && b == null;
};

export var initial = {
  errors: EMPTY_ERRORS,
  touched: {},
  submits: {
    submitCount: 0,
    submitAttempts: 0,
    submitting: false
  }
};
export var FORM_DATA = {
  VALUE: 1,
  ERRORS: 2,
  TOUCHED: 4,
  SUBMITS: 8,
  YUP_CONTEXT: 16,
  NO_VALIDATE: 32
};
export var FormActionsContext = React.createContext(null);
export var FormDataContext = React.createContext(initial, function (prev, next) {
  var changed = 0;
  if (!shallowequal(prev.errors, next.errors)) changed |= FORM_DATA.ERRORS;
  if (!shallowequal(prev.submits, next.submits)) changed |= FORM_DATA.SUBMITS;
  if (!isEqualOrNullish(prev.value, next.value)) changed |= FORM_DATA.VALUE;
  return changed;
});
export var withState = function withState(render, bits, opts) {
  return forwardRef(function (props, ref) {
    return React.createElement(FormDataContext.Consumer, {
      unstable_observedBits: bits
    }, function (context) {
      return render(context, props, ref);
    });
  }, opts || {});
};